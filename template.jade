// - vars = package.json

element(name=locals.name, \attributes="open closed vertical target targetId")
  // template
  // include style.css
  template
    style
      @host {
        * {
          display: none;
        }
      }
  :coffeescript(bare=true)
    stylize = (element, styles) ->
      style = element.style
      Object.keys(styles).forEach (k) ->
        style[k] = styles[k]

    Polymer.register this,
      vertical: false
      ready: ->
        @setAttribute "nolayout", ""

      inserted: ->
        @asyncMethod ->
          @prepare()
          @layout()


      prepare: ->
        parent = @parentNode.host or @parentNode
        cs = window.getComputedStyle(parent)
        parent.style.position = "relative"  if cs.position is "static"
        parent.style.overflow = "hidden"
        vertical = undefined
        @parentNode.childNodes.forEach (c, i) ->
          if c.nodeType is Node.ELEMENT_NODE and not c.hasAttribute("nolayout")
            stylize c,
              position: "absolute"
              boxSizing: "border-box"
              MozBoxSizing: "border-box"

            vertical = (c.offsetWidth is 0 and c.offsetHeight isnt 0)  if vertical is `undefined`

        @vertical = @vertical or vertical

      layout: ->
        parent = @parentNode.host or @parentNode
        vertical = @vertical
        ww = 0
        hh = 0
        pre = []
        fit = undefined
        post = []
        list = pre
        @parentNode.childNodes.forEach (c, i) ->
          if c.nodeType is Node.ELEMENT_NODE and not c.hasAttribute("nolayout")
            info =
              element: c
              w: c.offsetWidth
              h: c.offsetHeight

            unless c.hasAttribute("fit")
              ww += c.offsetWidth
              hh += c.offsetHeight
              list.push info
            else
              fit = c
              list = post
              ww = hh = 0

        v = 0
        mxp = 0
        myp = 0
        pre.forEach (info) ->
          if vertical
            stylize info.element,
              top: v + "px"
              right: mxp
              height: info.h + "px"
              left: mxp

          else
            stylize info.element,
              top: myp
              width: info.w + "px"
              bottom: myp
              left: v + "px"

          v += (if vertical then info.h else info.w)

        if fit
          if vertical
            stylize fit,
              top: v + "px"
              right: mxp
              bottom: hh + "px"
              left: mxp

          else
            stylize fit,
              top: myp
              right: ww + "px"
              bottom: myp
              left: v + "px"

          v = (if vertical then hh else ww)
          post.forEach (info) ->
            v -= (if vertical then info.h else info.w)
            if vertical
              stylize info.element,
                height: info.h + "px"
                right: mxp
                bottom: v + "px"
                left: mxp

            else
              stylize info.element,
                top: myp
                right: v + "px"
                bottom: myp
                width: info.w + "px"
